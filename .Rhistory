#personally if I am going to be reusing the
#same selection criteria, I like to set up
#a variable called criteria
criteria <- iris$Species=="setosa"
hist(iris$Petal.Length[criteria])
#common operators are <, <=, >, >=, ==, !=,
# !(apply not to the stuff in the parentheses)
#Lets make a fancier graph as a diversion
hist(iris$Petal.Length)
hist(iris$Petal.Length[criteria], add=TRUE, col="red")
#you can add criteria with AND symbols &
#to narrow the group found
criteria <- iris$Species=="setosa" & iris$Sepal.Width < 3.1
hist(iris$Petal.Length[criteria])
#you can broaden searches with OR symbols |
#to widen the group found
#but be careful to use parentheses to control
#the order in which things happen, compare
criteria <- iris$Species=="setosa" & (iris$Sepal.Width < 3.1 | iris$Sepal.Width > 3.5)
hist(iris$Petal.Length[criteria])
#with what happens with
criteria <- iris$Species=="setosa" & iris$Sepal.Width < 3.1 | iris$Sepal.Width > 3.5
hist(iris$Petal.Length[criteria])
# the %in% operator can be useful for
#identifying members of a list
criteria <- iris$Species %in% c("setosa","elephant","dingo")
hist(iris$Petal.Length[criteria])
#and now let's make a really common mistake
criteria <- iris$Species=="setosa"
#I want to make a scatterplot of Petal.Length
#to Petal.Width
#works fine with all the data
plot(iris$Petal.Length, iris$Petal.Width)
#but when I put the subset on Petal.Length
plot(iris$Petal.Length[criteria], iris$Petal.Width)
#the error message 'x' and 'y' lengths differ
#is telling me I have a different number of data
#entries, so the computer doesn't know how
#to match them together
# this is because I only had the subset on one
#thing I was working with, not both
plot(iris$Petal.Length[criteria], iris$Petal.Width[criteria])
#you can also subset numerically,
#picking the number rows
criteria <- 5:10
#this just uses rows 5 though 10 (inclusive) of the data
hist(iris$Petal.Length[criteria])
#you can also provide a list of numbers
criteria <- c(2,4,5:10,12)
hist(iris$Petal.Length[criteria])
#up 'till now we have been working with individual
#columns in the data you can also subset on the
#basis of dataframe[rowcriteria, columncriteria]
rowcriteria <- iris$Species=="setosa"
columncriteria <- 1:2
summary(iris[rowcriteria,columncriteria])
#you can also have a list of column numbers
rowcriteria <- iris$Species=="setosa"
columncriteria <- c(1:2,4)
summary(iris[rowcriteria,columncriteria])
#columns can also be identified by name, don't forget
#as text it has quotes
rowcriteria <- iris$Species=="setosa"
columncriteria <- c("Petal.Length","Petal.Width")
summary(iris[rowcriteria,columncriteria])
#if you leave the row criteria or column criteria
#blank, R will assume you want all
rowcriteria <- iris$Species=="setosa"
columncriteria <- c("Petal.Length","Petal.Width")
summary(iris[rowcriteria,])
summary(iris[,columncriteria])
#let's cause one more common error
rowcriteria <- iris$Species=="setosa"
columncriteria <- c("Petal.Length","Petal.Width")
summary(iris[rowcriteria])
#the error undefined columns selected is telling us
#that with no comma and no columns (or the space
# after the comma left blank) it has no idea what to do
#this is an easy mistake to make if you swapped from
#writing a lot of subsets of particular fields
#dataframe$fieldname[criteria] as the column
#selection is outside the []
fix(columncriteria)
fix(columncriteria)
fix(criteria)
fix(rowcriteria)
install.packages("XML")
install.packages(c("cluster", "doParallel", "doSNOW", "foreign", "KernSmooth", "lattice", "Matrix", "mgcv", "nnet", "rpart", "snow", "survival"))
install.packages(c("cluster", "doParallel", "doSNOW", "foreign",
install.packages("kernlab")
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/movies.txt",destfile="./movies.txt")
movies <- read.table("./movies.txt",sep="\t",header=T,quote="")
head(movies)
lm1 <- lm(movies$score ~ as.factor(movies$rating))
lm1 <- lm(movies$score ~ movies$box.office+movies$running.time)
summary(lm1)
confint(lm1,level=0.90)
cor(movies[c("score","box.office","running.time")
plot(movies$score, movies$running.time)
moviesr <- movies[movies$running.time<"200", ]
plot(moviesr$score, moviesr$running.time)
plot(movies$score, movies$running.time)
plot(moviesr$score, moviesr$running.time)
plot(movies$score, movies$running.time)
moviesr <- movies[movies$running.time<"200", ]
plot(moviesr$score, moviesr$running.time)
lm2 <- lm(moviesr$score ~ moviesr$box.office+moviesr$running.time)
summary(lm1)
summary(lm2)
lm3 <- lm(movies$score ~ as.numeric(movies$rating)+movies$running.time+as.numeric(movies$rating)*movies$running.time)
lm3 <- lm(movies$score ~ as.numeric(movies$rating)+movies$running.time+as.numeric(movies$rating)*movies$running.time)
summary(lm3)
lm3 <- lm(movies$score ~ as.factor(movies$rating)+movies$running.time+as.numeric(movies$rating)*movies$running.time)
lm3 <- lm(movies$score ~ as.factor(movies$rating)+movies$running.time+as.factor(movies$rating)*movies$running.time)
summary(lm3)
lm3 <- lm(movies$score ~ as.numeric(movies$rating)+movies$running.time+as.numeric(movies$rating)*movies$running.time)
summary(lm3)
lm4 <- lm(movies$score ~ as.factor(movies$rating)+movies$running.time+as.factor(movies$rating)*movies$running.time)
summary(lm4)
data(warpbreaks)
head(warpbreaks)
warp<-data(warpbreaks)
head(warp)
lm6 <- lm(warp$breaks ~ as.factor(warp$tension))
summary(lm6)
View(warpbreaks)
View(warpbreaks)
warp<-data(warpbreaks)
head(warp)
warp=data(warpbreaks)
head(warp)
lm6 <- lm(warp$ ~ as.factor(warp$tension))
summary(lm6)
data(warpbreaks)
head(warpbreaks)
lm6 <- lm(warpbreaks$breaks ~ as.factor(warpbreaks$tension))
summary(lm6)
lm4 <- lm(movies$score ~ as.factor(movies$rating)+movies$running.time+as.factor(movies$rating)*movies$running.time)
summary(lm4)
lm3 <- lm(movies$score ~ as.numeric(movies$rating)+movies$running.time+as.numeric(movies$rating)*movies$running.time)
summary(lm3)
lm4 <- lm(movies$score ~ as.factor(movies$rating)+movies$running.time+as.factor(movies$rating)*movies$running.time, ref="PG")
summary(lm4)
data(warpbreaks)
head(warpbreaks)
lm6 <- lm(warpbreaks$breaks ~ as.factor(warpbreaks$tension))
summary(lm6)
lm6 <- lm(warpbreaks$breaks ~ as.factor(warpbreaks$tension), ref=L)
lm6 <- lm(warpbreaks$breaks ~ as.factor(warpbreaks$tension, ref=L))
lm6 <- lm(warpbreaks$breaks ~ relevel(warpbreaks$tension, ref=L))
lm6 <- lm(warpbreaks$breaks ~ relevel(warpbreaks$tension, ref="L"))
summary(lm6)
confint(lm6)
lm4 <- lm(movies$score ~ as.factor(movies$rating)+movies$running.time+as.factor(movies$rating)*movies$running.time, ref="PG")
summary(lm4)
View(movies)
View(movies)
moviesr <- movies[movies$running.time<"200", ]
plot(moviesr$score, moviesr$running.time)
lm2 <- lm(moviesr$score ~ moviesr$box.office+moviesr$running.time)
summary(lm1)
summary(lm2)
lm6 <- lm(warpbreaks$breaks ~ relevel(warpbreaks$tension, ref="M"))
summary(lm6)
confint(lm6)
lm6 <- lm(warpbreaks$breaks ~ relevel(warpbreaks$tension, ref="H"))
summary(lm6)
confint(lm6)
lm4 <- lm(movies$score ~ as.factor(movies$rating, ref="PG")+movies$running.time+as.factor(movies$rating)*movies$running.time, ref="PG")
lm4 <- lm(movies$score ~ relevel(movies$rating, ref="PG")+movies$running.time+as.factor(movies$rating)*movies$running.time)
summary(lm4)
lm4 <- lm(movies$score ~ relevel(movies$rating, ref="PG")+movies$running.time+relevel(movies$rating, ref="PG")*movies$running.time)
summary(lm4)
data(warpbreaks)
head(warpbreaks)
aovObject <- aov(warpbreaks$wool ~ warpbreaks$tension)
summary(aovObject)
data(warpbreaks)
head(warpbreaks)
aovObject <- aov(warpbreaks$wool ~ warpbreaks$tension)
summary(aovObject)
summary(warpbreaks)
aovObject <- aov(formula = warpbreaks$wool ~ warpbreaks$tension)
summary(aovObject)
aovObject <- aov(formula = warpbreaks$wool ~ warpbreaks$tension)
aovObject <- aov(formula = warpbreaks$wool ~ warpbreaks$tension)
aovObject <- aov(formula = warpbreaks$breaks ~ warpbreaks$wool+ warpbreaks$tension)
summary(aovObject)
log(0.25)
library(glm2)
data(crabs)
install.packages("glm2")
library(glm2)
data(crabs)
summary(crabs)
glm1 <- glm(crabs$Satellites ~ crabs$width,family="poisson")
glm1 <- glm(formula= crabs$Satellites ~ crabs$width,family="poisson")
glm1 <- glm(crabs$Satellites ~ crabs$width,family="poisson")
glm1 <- glm(crabs$Satellites ~ crabs$Width,family="poisson")
summary(glm)
summary(glm1)
0.16405*22-3.30476
log(0.16405*22-3.30476)
log(0.16405*22-3.30476+22)
library(MASS)
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)                              1
data(quine)
lm1 = lm(log(Days + 2.5) ~.,data=quine)                              1
lm1 = lm(log(Days +2.5) ~.,data=quine)                              1
lm1 = lm(log(quine$Days +2.5) ~.,data=quine)                              1
lm1 = lm(log(quine$Days ) ~.,data=quine)                              1
lm1 = lm(log(quine$Days +2.5) ~.,data=quine)                              1
summary(quine)
lm1 =lm(log(quine$Days+2.5)~.,data=quine)                              1
lm1 =lm((quine$Days+2.5)~.,data=quine)                              1
lm1 =lm(log(quine$Days+2.5)~.,data=quine)
aicFormula <- step(lm1)
aicFormula
summary(quine)
data(crabs)
summary(crabs)
glm1 <- glm(crabs$Satellites ~ crabs$Width,family="poisson")
summary(glm1)
library(glm2)
data(crabs)
summary(crabs)
head(crabs)
library(glm2)
data(crabs)
summary(crabs)
head(crabs)
glm1 <- glm(crabs$Satellites ~ crabs$Width,family="poisson")
summary(glm1)
library(devtools)
install_github("mewo2")
library(medley)
install_github("medley","mewo2")
library(medley)
install_github("mewo2")
install.packages("simpleboot")
library(simpleboot)
data(airquality)
attach(airquality)
data(Cars93,package="MASS")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
getwd()
x<-4
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[1]]
class( x[[1]] )
x <- 1:4
y <- 2:3
x+y
x <- 1:4
y<-2
x+y
tracingstate
tracingstate()
tracingState()
corr <- function(directory, threshold = 0) {
filenames <- list.files(directory, pattern="*.csv", full.names=TRUE)
getfileComplete <- function(fname, directory, summarize = FALSE) {
#fname<-sprintf("%s/%03.0f.csv",directory, as.integer(id))
df  <- read.csv(fname)
if (summarize) {print(summary(df))}
c(fname, sum(complete.cases(df)))
}
getfilenitratesulfate <- function(fname) {
#fname<-sprintf("%s/%03.0f.csv",directory, as.integer(id))
df  <- read.csv(fname)
cor(df$nitrate, df$sulfate,use="complete.obs")
}
all<-sapply(filenames,getfileComplete, directory)
id<-all[1,]
nobs<-all[2,]
data<-cbind(id,nobs)
dfall<-data.frame( data, row.names=NULL)
dfall$nobs<-as.numeric(dfall$nobs)
dfall$id<-as.character(dfall$id)
dfall<-subset(dfall,dfall$nobs>threshold)
filenamesfiltered<-dfall$id
}
all<-corr("specdata",400)
all<-corr("specdata",400)
corr <- function(directory, threshold = 0) {
filenames <- list.files(directory, pattern="*.csv", full.names=TRUE)
getfileComplete <- function(fname, directory, summarize = FALSE) {
#fname<-sprintf("%s/%03.0f.csv",directory, as.integer(id))
df  <- read.csv(fname)
if (summarize) {print(summary(df))}
c(fname, sum(complete.cases(df)))
}
getfilenitratesulfate <- function(fname) {
#fname<-sprintf("%s/%03.0f.csv",directory, as.integer(id))
df  <- read.csv(fname)
cor(df$nitrate, df$sulfate,use="complete.obs")
}
all<-sapply(filenames,getfileComplete, directory)
id<-all[1,]
nobs<-all[2,]
data<-cbind(id,nobs)
dfall<-data.frame( data, row.names=NULL)
dfall$nobs<-as.numeric(dfall$nobs)
dfall$id<-as.character(dfall$id)
dfall<-subset(dfall,dfall$nobs>threshold)
filenamesfiltered<-dfall$id
allns<-sapply(filenamesfiltered,getfilenitratesulfate)
}
all<-corr("specdata",400)
corr <- function(directory, threshold = 0) {
filenames <- list.files(directory, pattern="*.csv", full.names=TRUE)
getfileComplete <- function(fname, directory, summarize = FALSE) {
#fname<-sprintf("%s/%03.0f.csv",directory, as.integer(id))
df  <- read.csv(fname)
if (summarize) {print(summary(df))}
c(fname, sum(complete.cases(df)))
}
getfilenitratesulfate <- function(fname) {
#fname<-sprintf("%s/%03.0f.csv",directory, as.integer(id))
df  <- read.csv(fname)
cor(df$nitrate, df$sulfate,use="complete.obs")
}
all<-sapply(filenames,getfileComplete, directory)
}
all<-corr("specdata",400)
jpeg()
?jpeg
?histogram
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
x <- rnorm(100)
y <- x + rnorm(100, sd = 0.5)
f <- gl(2, 50, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f)
# Lattice Examples
library(lattice)
attach(mtcars)
# create factors with value labels
gear.f<-factor(gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
cyl.f <-factor(cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# kernel density plot
densityplot(~mpg,
main="Density Plot",
xlab="Miles per Gallon")
# kernel density plots by factor level
densityplot(~mpg|cyl.f,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
# kernel density plots by factor level (alternate layout)
densityplot(~mpg|cyl.f,
main="Density Plot by Numer of Cylinders",
xlab="Miles per Gallon",
layout=c(1,3))
# boxplots for each combination of two factors
bwplot(cyl.f~mpg|gear.f,
ylab="Cylinders", xlab="Miles per Gallon",
main="Mileage by Cylinders and Gears",
layout=(c(1,3))
# scatterplots for each combination of two factors
xyplot(mpg~wt|cyl.f*gear.f,
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight")
# 3d scatterplot by factor level
cloud(mpg~wt*qsec|cyl.f,
main="3D Scatterplot by Cylinders")
# dotplot for each combination of two factors
dotplot(cyl.f~mpg|gear.f,
main="Dotplot Plot by Number of Gears and Cylinders",
xlab="Miles Per Gallon")
# scatterplot matrix
splom(mtcars[c(1,3,4,5,6)],
main="MTCARS Data")
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
install.packages("KernSmooth")
load(kernsmooth)
install.packages("mgcv")
library(kernsmooth)
library(KernSmooth)
install.packages("devtools")
library(devtools)
library(devtools)
find_rtools
?qunif
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp$X*temp$Prob
temp[X]*temp[Prob]
X*p
x
x * p
sum(x * p)
round(qnorm(.95, mean = 100, sd = 10 / sqrt(50) ), 3)
round(pnorm(70, mean = 80, sd = 10) * 100)
round(qnorm(.95, mean = 1100, sd =75  ))
round(qnorm(.95, mean = 1100, sd =sqrt(75^2/100))
round(qnorm(.95, mean = 1100, sd =sqrt(75^2/100)))
2+2
round(qnorm(.95, mean = 1100, sd =sqrt(75^2/100)))
7/32
3/32
8/32
round(ppois(10, lambda = 5 * 3) * 100, 1)
round(ppois(10, lambda = 5 * 3) * 100, 1)
round(ppois(20, lambda = 16.5 * 2) * 100, 1)
6/32
setwd("C:/coursera/reproducible research/RepData_PeerAssessment1")
activity <- read.csv("C:/coursera/reproducible research/RepData_PeerAssessment1/activity.csv", stringsAsFactors=FALSE)
View(activity)
library(dplyr)
library(ggplot2)
library(lubridate)
mutate (activity, date=mdy(date))
mutate (activity, date=ymd(date))
actPerDay <- activityDF %>%
group_by(date) %>%
summarise(steps = sum(steps, na.rm = TRUE))
meansteps <- activity %>%
group_by(date) %>%
summarise(steps = sum(steps, na.rm = TRUE))
View(meansteps)
stepsperday <- activity %>%
group_by(date) %>%
summarise(steps = sum(steps, na.rm = TRUE))
summarise(stepsperday, mean(steps), median(steps))
qplot(steps, data=stepsperday, geom="histogram")
qplot(steps, data=stepsperday, geom="histogram",binwidth=1)
stepsperinterval <- activityDF %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = TRUE))
p <- ggplot(stepsperinterval, aes(x=interval, y=steps,))
p + geom_line()
stepsperinterval <- activity %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = TRUE))
p <- ggplot(stepsperinterval, aes(x=interval, y=steps,))
p + geom_line()
install.packages("Amelia")
install.packages("mitools")
sum(is.na(activity$steps))
activity <- activity %>%
left_join(stepsperinterval, by = "interval") %>%
mutate(steps = ifelse(is.na(steps.x), steps.y, steps.x))
activity <- activity %>%
left_join(stepsperinterval, by = "interval")
View(stepsperinterval)
View(stepsperinterval)
activityj <- activity %>%
left_join(stepsperinterval, by = "interval")
View(activityj)
View(activityj)
activityjoined <- activity %>%
left_join(stepsperinterval, by = "interval") %>%
mutate(steps = ifelse(is.na(steps.x), steps.y, steps.x))
activityjoined <- activity %>%
left_join(stepsperinterval, by = "interval")
View(activityjoined)
View(activityjoined)
View(activity)
View(activity)
activity <- read.csv("activity.csv", stringsAsFactors=FALSE)
stepsperday <- activity %>%
group_by(date) %>%
summarise(steps = sum(steps, na.rm = TRUE))
qplot(steps, data=stepsperday, geom="histogram")
summarise(stepsperday, mean(steps), median(steps))
## What is the average daily activity pattern?
stepsperinterval <- activity %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = TRUE))
p <- ggplot(stepsperinterval, aes(x=interval, y=steps,))
p + geom_line()
sum(is.na(activity$steps))
activityjoined <- activity %>%
left_join(stepsperinterval, by = "interval") %>%
mutate(steps = ifelse(is.na(steps.x), steps.y, steps.x))
View(activityjoined)
qplot(steps, data=activityjoined, geom="histogram")
mutate(date = ifelse(day(date)==1 || day(date)==7, "Weekend", "weekday"))
mutate(date = ifelse(day(date)==1 or day(date)==7, "Weekend", "weekday"))
mutate(date = ifelse(day(date)==1 | day(date)==7, "Weekend", "weekday"))
mutate(activityjoined = ifelse(day(date)==1  day(date)==7, "Weekend", "weekday"))
mutate(activityjoined = ifelse(day(date)==1 || day(date)==7, "Weekend", "weekday"))
activityweekend <- activityjoined %>%
mutate(date= ifelse(day(date)==1 || day(date)==7, "Weekend", "weekday"))
View(activityjoined)
View(activityjoined)
View(activityweekend)
View(activityweekend)
activityweekend <- activityjoined %>%
mutate(date= ifelse(day(date)==1 || day(date)==7, "Weekend", "weekday"))
